/**
* This file was automatically generated by @abstract-money/ts-codegen@0.37.0-beta-3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export interface InstantiateMsg {
  recipient_account: number;
  swap_fee: Decimal;
}
export type ExecuteMsg = {
  update_fee: {
    recipient_account?: number | null;
    swap_fee?: Decimal | null;
  };
} | {
  action: {
    action: DexAction;
    dex: string;
  };
};
export type DexAction = {
  provide_liquidity: {
    assets: AssetBaseForString[];
    max_spread?: Decimal | null;
    pool: PoolAddressBaseForString;
  };
} | {
  withdraw_liquidity: {
    lp_token: AssetBaseForString;
    pool: PoolAddressBaseForString;
  };
} | {
  swap: {
    ask_asset: AssetInfoBaseForString;
    belief_price?: Decimal | null;
    max_spread?: Decimal | null;
    offer_asset: AssetBaseForString;
    pool: PoolAddressBaseForString;
  };
} | {
  route_swap: {
    belief_price?: Decimal | null;
    max_spread?: Decimal | null;
    offer_asset: AssetBaseForString;
    route: SwapNodeForString[];
  };
};
export type Uint128 = string;
export type AssetInfoBaseForString = {
  native: string;
} | {
  cw20: string;
};
export type PoolAddressBaseForString = {
  separate_addresses: {
    liquidity: string;
    swap: string;
  };
} | {
  contract: string;
} | {
  id: number;
};
export interface AssetBaseForString {
  amount: Uint128;
  info: AssetInfoBaseForString;
}
export interface SwapNodeForString {
  ask_asset: AssetInfoBaseForString;
  pool_id: PoolAddressBaseForString;
}
export type QueryMsg = {
  simulate_swap: {
    ask_asset: AssetEntry;
    dex: string;
    offer_asset: AnsAsset;
  };
} | {
  simulate_swap_raw: {
    ask_asset: AssetInfoBaseForString;
    dex: string;
    offer_asset: AssetBaseForString;
    pool: PoolAddressBaseForString;
  };
} | {
  generate_messages: {
    addr_as_sender: string;
    message: DexExecuteMsg;
  };
} | {
  fees: {};
};
export type AssetEntry = string;
export type DexExecuteMsg = {
  update_fee: {
    recipient_account?: number | null;
    swap_fee?: Decimal | null;
  };
} | {
  action: {
    action: DexAction;
    dex: string;
  };
};
export interface AnsAsset {
  amount: Uint128;
  name: AssetEntry;
  [k: string]: unknown;
}
export interface MigrateMsg {
  [k: string]: unknown;
}
export type Addr = string;
export interface DexFeesResponse {
  recipient: Addr;
  swap_fee: Fee;
}
export interface Fee {
  share: Decimal;
}
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  stargate: {
    type_url: string;
    value: Binary;
    [k: string]: unknown;
  };
} | {
  ibc: IbcMsg;
} | {
  wasm: WasmMsg;
} | {
  gov: GovMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
} | {
  fund_community_pool: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type Binary = string;
export type IbcMsg = {
  transfer: {
    amount: Coin;
    channel_id: string;
    timeout: IbcTimeout;
    to_address: string;
    [k: string]: unknown;
  };
} | {
  send_packet: {
    channel_id: string;
    data: Binary;
    timeout: IbcTimeout;
    [k: string]: unknown;
  };
} | {
  close_channel: {
    channel_id: string;
    [k: string]: unknown;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate2: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    salt: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
} | {
  vote_weighted: {
    options: WeightedVoteOption[];
    proposal_id: number;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export interface GenerateMessagesResponse {
  messages: CosmosMsgForEmpty[];
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface WeightedVoteOption {
  option: VoteOption;
  weight: Decimal;
  [k: string]: unknown;
}
export type DexAssetPairingForAssetEntry = [AssetEntry, AssetEntry, string];
export interface SimulateSwapResponseForAssetEntry {
  commission: [AssetEntry, Uint128];
  pool: DexAssetPairingForAssetEntry;
  return_amount: Uint128;
  spread_amount: Uint128;
  usage_fee: Uint128;
}
export type DexAssetPairingForAssetInfoBaseForString = [AssetInfoBaseForString, AssetInfoBaseForString, string];
export interface SimulateSwapResponseForAssetInfoBaseForString {
  commission: [AssetInfoBaseForString, Uint128];
  pool: DexAssetPairingForAssetInfoBaseForString;
  return_amount: Uint128;
  spread_amount: Uint128;
  usage_fee: Uint128;
}